" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/bundle')

" Plug 'junegunn/fzf'
Plug 'ctrlpvim/ctrlp.vim', {'lazy': 1, 'autoload': {'commands': 'CtrlP', 'mappings': '<c-p>',}}
Plug 'tacahiroy/ctrlp-funky'
Plug 'rking/ag.vim'                    " search in local files :Ag
Plug 'airblade/vim-gitgutter'          " show git changes with signs
Plug 'tpope/vim-fugitive'
Plug 'schickling/vim-bufonly'          " :BufOnly to delete all buffers except the current one (Aliases: :Bonly, :BOnly, :Bufonly)

Plug 'ekalinin/Dockerfile.vim' " docker highlight
" A fork of desert256.vim aims to make it a bit warm and more friendly for
" my eyes.
" Plug 'rainux/vim-desert-warm-256'
Plug 'sickill/vim-monokai'
" A slightly-modified desert theme, for 88- and 256-color xterms
" Plug 'vim-scripts/desert256.vim'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
 " Syntax highlighting and indenting for JSX
" Plug 'marijnh/tern_for_vim'
" Plug 'sidorares/node-vim-debugger'

" Plug 'SirVer/ultisnips'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
" Plug 'Valloric/YouCompleteMe', {
"       \ 'build'      : {
"       \   'unix'    : './install.sh --tern-completer ',
"       \ }
"       \ }
if has('nvim')
  Plug 'w0rp/ale'
else
  Plug 'scrooloose/syntastic'
endif
" Plug 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript']}}
Plug 'elzr/vim-json'
Plug 'bling/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag' " mappings for html, xml (<C-X>$  <script src='/javascripts/^.js'></script>)
Plug 'tpope/vim-eunuch' " :Remove, :Rename
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-abolish' " :Subvert/blog{,s}/post{,s}/g

" Plug 'ternjs/tern_for_vim'
" Plug 'moll/vim-node'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-commentary' " example gcat -> comment a tag
Plug 'tpope/vim-jdaddy' " gqaj 'pretty prints' (wraps/indents/sorts keys/otherwise cleans up) the JSON construct under the cursor.
Plug 'tpope/vim-unimpaired'
" Plug 'sindresorhus/vim-xo'
" Plug 'flowtype/vim-flow',{
"             \ 'autoload': {
"             \     'filetypes': 'javascript'
"             \ }}

Plug 'groenewege/vim-less'
" Plug 'Raimondi/delimitMate' " add parenthesis

" Plug 'mattn/webapi-vim'
Plug 'mbbill/undotree'
Plug 'tmhedberg/matchit'

" install for nicer indentation
" npm install -g js-beautify
" npm install -g js-beautify
" sudo apt-get install tidy  for HTML, XHTML and XML
Plug 'Chiel92/vim-autoformat'

Plug 'suan/vim-instant-markdown'

" Initialize plugin system
call plug#end()

" undo settings
if has("persistent_undo")
  set undodir=~/.vim/undo
  set undofile
endif
set history=1000
set undolevels=10000

" using Chiel92/vim-autoformat
noremap <F4> :Autoformat<CR>
noremap <F2> :exec "!xo --fix %" <CR> :w <CR>
" set verbose=1
" let g:formatdef_xo_javascript = '"xo --fix --stdin"'
" let g:autoformat_verbosemode=1
" let g:formatters_javascript = ['xo_javascript']

" au BufWrite * :Autoformat " code be formatted upon saving your file

let g:neobundle#install_process_timeout = 15000000
let g:neobundle#log_filename=expand('~/.vim/plugin_install.log')
let g:neobundle#types#git#enable_submodule = 0
let g:neobundle#install_max_processes = 4

" Emmet plugin
" Example: html:5    C-Y ,
" Don't forget the comma
" https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key='<C-Y>'

:let mapleader = ","
"let g:unite_source_file_rec_max_cache_files = 0
"call unite#custom#source('file_mru,file_rec,file_rec/async,grepocate',
"\ 'max_candidates', 0)
"
"" slow to start
"nnoremap <C-t> :Unite -start-insert file_rec/async<cr>

set backspace=2         " backspace in insert mode works like normal editor

syntax on               " syntax highlighting
filetype on
filetype indent on      " activates indenting for files
filetype plugin  on      " activates indenting for files

set clipboard=unnamedplus " use the system clipboard when copy

:silent! colorscheme monokai "silent if plugin not yet installed

set tabstop=2
set shiftwidth=2
set softtabstop=2   " number of spaces in tab when editing
set expandtab
"
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

set hidden " hide buffer instead of closing it, much faster
" Use hidden instead of autwriteall because it makes switching buffers to be
" too slow
" set autowriteall "automatically save any changes made to the buffer before it is hidden


autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

set autoindent          " auto indenting
set number              " line numbers
set t_Co=256 " Enable high-color
" colorscheme desert-warm-256   " colorscheme desert
" set nobackup            " get rid of anoying ~file

" Override the gitgutter sign column color
hi SignColumn            ctermbg=235
hi GitGutterAdd          ctermbg=235 ctermfg=green  cterm=none
hi GitGutterChange       ctermbg=235 ctermfg=yellow cterm=none
hi GitGutterDelete       ctermbg=235 ctermfg=red    cterm=none
hi GitGutterChangeDelete ctermbg=235 ctermfg=red    cterm=none
let g:gitgutter_max_signs=5000

" Make gitgutter run less so it doesn't lag vim
let g:gitgutter_eager = 1
let g:gitgutter_realtime = 1
" let g:gitgutter_highlight_lines = 1
set updatetime=150

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

" The Silver Searcher
" http://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" let g:ctrlp_extensions = ['buffertag', 'tag', 'line', 'dir']

let g:ctrlp_match_window = 'results:100' " Display more results
let g:ctrlp_match_window = 'min:4,max:72'

let g:ctrlp_mruf_relative = 1

" These are the tweaks I apply to YCM's config, you don't need them but they
" might help.
" " YCM gives you popups and splits by default that some people might not
" like, so these should tidy it up a bit for you.
let g:ycm_add_preview_to_completeopt = 1
" let g:ycm_confirm_extra_conf=0
set completeopt-=preview

" set omnifunc=syntaxcomplete#Complete

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" npm install -g eslint
" npm install -g babel-eslint
" npm install -g eslint-plugin-react
" .eslintrc
if has('nvim')
  " for neoVim of vim 8, ale is faster than syntastic
  let g:ale_linters = {'javascript': ['eslint', 'flow']}
  let g:ale_fixers = {
  \   'javascript': ['prettier'],
  \   'css': ['prettier'],
  \}
  let g:ale_fix_on_save = 1

  " Write this in your vimrc file
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 1
  " Asynchronous Lint Engine (ALE)
  " Limit linters used for JavaScript.
  highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
  highlight clear ALEWarningSign " otherwise uses error bg color (typically red)
  let g:ale_sign_error = 'X' " could use emoji
  let g:ale_sign_warning = '?' " could use emoji
  let g:ale_statusline_format = ['X %d', '? %d', '']
  " %linter% is the name of the linter that provided the message
  " %s is the error or warning message
  let g:ale_echo_msg_format = '%linter% says %s'
  " Map keys to navigate between lines with errors and warnings.
  nnoremap <leader>an :ALENextWrap<cr>
  nnoremap <leader>ap :ALEPreviousWrap<cr>
else
  let g:syntastic_javascript_eslint_generic = 1
  let g:syntastic_javascript_eslint_exec = 'xo'
  let g:syntastic_javascript_eslint_args = '--space --reporter=compact' " instead of adding space, it is better to add it in your project
  let g:syntastic_javascript_checkers = ['eslint', 'flow']  " https://github.com/jaxbot/syntastic-react
  " let g:syntastic_javascript_flow_exe = 'flow --quiet'

  " recommended settings for syntastic
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0 " disable since buffer are written each time bprevious/bnext is called
  let g:syntastic_check_on_wq = 1 " check the file on save

  " close syntastic when the buffer is deleted, see faq
  " https://github.com/vim-syntastic/syntastic
  " nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
  cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>
endif

let g:jsx_ext_required = 0 " jsx in js files allowed

let g:airline#extensions#tabline#enabled = 1

" To work with Coc.nvim
" let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
" let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

"Use locally installed flow
let local_flow = finddir('node_modules', '.;') . '/.bin/flow'
if matchstr(local_flow, "^\/\\w") == ''
    let local_flow= getcwd() . "/" . local_flow
endif
if executable(local_flow)
  let g:flow#flowpath = local_flow
endif

let g:flow#omnifunc = 1
let g:flow#timeout = 10
let g:flow#enable = 0

:nnoremap <C-J> :bprevious<CR>
:nnoremap <C-K> :bnext<CR>
:noremap <C-Right> <C-W><Right>
:noremap <C-Left> <C-W><Left>
:noremap <F5> :NERDTreeFind<CR>


au BufRead,BufNewFile *.md set filetype=markdown
au BufNewFile,BufRead *.less set filetype=css

" Highlight searches
set hlsearch
set incsearch

set visualbell           " don't beep
set noerrorbells         " don't beep

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Better command-line completion
set wildmenu

set relativenumber

highlight javascriptOpSymbols ctermfg=159 guifg=#afffff
highlight javascriptParens ctermfg=193 guifg=#d7ffaf


" F3 calls Flow find definition
noremap <F3> :FlowJumpToDef<CR>

" imap <Esc> <Esc>:wa<CR>   " press 2 times esc to save all buffers
" nmap <Esc> :wa<CR> " press 2 times esc to save all buffers

" map <Esc><Esc> :wa<CR> " press 2 times esc to save all buffers


" let g:tern_show_signature_in_pum=1 "  display function signatures in the completion menu
" let g:tern_show_argument_hints='on_hold'

set noswapfile

" automatically leave insert mode after 'updatetime' milliseconds of inaction
" set updatetime=5000
" au CursorHoldI * stopinsert

" automatically refresh any unchanged files
set autoread

nnoremap <Leader>e :e <C-R>=expand('%:p:h') . '/'<CR>

nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <Leader>m :CtrlPMRU<CR>

" Save the file using 2 times the leader
nnoremap <Leader><Leader> :w<CR> 

set mouse=a

set lazyredraw
set ttyfast

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
 " NeoBundleCheck
